diff --git a/dist/cjs/nextjs/createServerValidate.cjs b/dist/cjs/nextjs/createServerValidate.cjs
index 5c49582dec7ad1d023b12f5e96a41d36f3f22611..491c6a037090ff76996e4e23adce297f109282f3 100644
--- a/dist/cjs/nextjs/createServerValidate.cjs
+++ b/dist/cjs/nextjs/createServerValidate.cjs
@@ -4,14 +4,14 @@ const decodeFormdata = require("decode-formdata");
 const error = require("./error.cjs");
 const createServerValidate = (defaultOpts) => async (formData, info) => {
   const { validatorAdapter, onServerValidate } = defaultOpts;
-  const runValidator = (propsValue) => {
+  const runValidator = async (propsValue) => {
     if (validatorAdapter && typeof onServerValidate !== "function") {
-      return validatorAdapter().validate(propsValue, onServerValidate);
+      return validatorAdapter().validateAsync(propsValue, onServerValidate);
     }
     return onServerValidate(propsValue);
   };
   const values = decodeFormdata.decode(formData, info);
-  const onServerError = runValidator({ value: values });
+  const onServerError = await runValidator({ value: values });
   if (!onServerError) return;
   const formState = {
     errorMap: {
diff --git a/dist/cjs/nextjs/createServerValidate.d.cts b/dist/cjs/nextjs/createServerValidate.d.cts
index 9eb35884f470005892ea6f3a27322e53bc59ae62..e8154b659dc8e18d460675e3ee88a18c8a74e015 100644
--- a/dist/cjs/nextjs/createServerValidate.d.cts
+++ b/dist/cjs/nextjs/createServerValidate.d.cts
@@ -4,9 +4,10 @@ import { ServerFormState } from './types.cjs';
 
 type OnServerValidateFn<TFormData> = (props: {
     value: TFormData;
-}) => ValidationError;
+}) => ValidationError | Promise<ValidationError>;
+type OnServerValidateOrFn<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> = TFormValidator extends Validator<TFormData, infer FFN> ? FFN | OnServerValidateFn<TFormData> : OnServerValidateFn<TFormData>;
 interface CreateServerValidateOptions<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> extends FormOptions<TFormData, TFormValidator> {
-    onServerValidate: OnServerValidateFn<TFormData>;
+    onServerValidate: OnServerValidateOrFn<TFormData, TFormValidator>;
 }
 export declare const createServerValidate: <TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined>(defaultOpts: CreateServerValidateOptions<TFormData, TFormValidator>) => (formData: FormData, info?: Parameters<typeof decode>[1]) => Promise<void>;
 export declare const initialFormState: ServerFormState<any>;
diff --git a/dist/esm/nextjs/createServerValidate.d.ts b/dist/esm/nextjs/createServerValidate.d.ts
index 03fecdb32aab182dc2ca8a8f7571b62519d57498..ec43c98eac64b0d9e9e36d86726230f95dfdfc72 100644
--- a/dist/esm/nextjs/createServerValidate.d.ts
+++ b/dist/esm/nextjs/createServerValidate.d.ts
@@ -4,9 +4,10 @@ import { ServerFormState } from './types.js';
 
 type OnServerValidateFn<TFormData> = (props: {
     value: TFormData;
-}) => ValidationError;
+}) => ValidationError | Promise<ValidationError>;
+type OnServerValidateOrFn<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> = TFormValidator extends Validator<TFormData, infer FFN> ? FFN | OnServerValidateFn<TFormData> : OnServerValidateFn<TFormData>;
 interface CreateServerValidateOptions<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> extends FormOptions<TFormData, TFormValidator> {
-    onServerValidate: OnServerValidateFn<TFormData>;
+    onServerValidate: OnServerValidateOrFn<TFormData, TFormValidator>;
 }
 export declare const createServerValidate: <TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined>(defaultOpts: CreateServerValidateOptions<TFormData, TFormValidator>) => (formData: FormData, info?: Parameters<typeof decode>[1]) => Promise<void>;
 export declare const initialFormState: ServerFormState<any>;
diff --git a/dist/esm/nextjs/createServerValidate.js b/dist/esm/nextjs/createServerValidate.js
index ecd3fb3bfea260d8c1c2f6cdbcbf55a875e6995f..65f53d061e2cf1aaee92cc20a15a124529d992cd 100644
--- a/dist/esm/nextjs/createServerValidate.js
+++ b/dist/esm/nextjs/createServerValidate.js
@@ -2,14 +2,14 @@ import { decode } from "decode-formdata";
 import { ServerValidateError } from "./error.js";
 const createServerValidate = (defaultOpts) => async (formData, info) => {
   const { validatorAdapter, onServerValidate } = defaultOpts;
-  const runValidator = (propsValue) => {
+  const runValidator = async (propsValue) => {
     if (validatorAdapter && typeof onServerValidate !== "function") {
-      return validatorAdapter().validate(propsValue, onServerValidate);
+      return validatorAdapter().validateAsync(propsValue, onServerValidate);
     }
     return onServerValidate(propsValue);
   };
   const values = decode(formData, info);
-  const onServerError = runValidator({ value: values });
+  const onServerError = await runValidator({ value: values });
   if (!onServerError) return;
   const formState = {
     errorMap: {
diff --git a/src/nextjs/createServerValidate.ts b/src/nextjs/createServerValidate.ts
index 13154c9754b9f2b02aeb739ed42d36425564beb4..c3dc4d202d4be9eaf8c00d4f3664827f65a3072c 100644
--- a/src/nextjs/createServerValidate.ts
+++ b/src/nextjs/createServerValidate.ts
@@ -9,13 +9,20 @@ import type { ServerFormState } from './types'
 
 type OnServerValidateFn<TFormData> = (props: {
   value: TFormData
-}) => ValidationError
+}) => ValidationError | Promise<ValidationError>
+
+type OnServerValidateOrFn<
+  TFormData,
+  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,
+> = TFormValidator extends Validator<TFormData, infer FFN>
+  ? FFN | OnServerValidateFn<TFormData>
+  : OnServerValidateFn<TFormData>
 
 interface CreateServerValidateOptions<
   TFormData,
   TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,
 > extends FormOptions<TFormData, TFormValidator> {
-  onServerValidate: OnServerValidateFn<TFormData>
+  onServerValidate: OnServerValidateOrFn<TFormData, TFormValidator>
 }
 
 export const createServerValidate =
@@ -30,9 +37,9 @@ export const createServerValidate =
   async (formData: FormData, info?: Parameters<typeof decode>[1]) => {
     const { validatorAdapter, onServerValidate } = defaultOpts
 
-    const runValidator = (propsValue: { value: TFormData }) => {
+    const runValidator = async (propsValue: { value: TFormData }) => {
       if (validatorAdapter && typeof onServerValidate !== 'function') {
-        return validatorAdapter().validate(propsValue, onServerValidate)
+        return validatorAdapter().validateAsync(propsValue, onServerValidate)
       }
 
       return (onServerValidate as OnServerValidateFn<TFormData>)(propsValue)
@@ -40,7 +47,7 @@ export const createServerValidate =
 
     const values = decode(formData, info) as never as TFormData
 
-    const onServerError = runValidator({ value: values })
+    const onServerError = await runValidator({ value: values })
 
     if (!onServerError) return
 
