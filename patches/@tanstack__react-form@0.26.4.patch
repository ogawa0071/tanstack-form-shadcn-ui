diff --git a/dist/cjs/nextjs/createServerValidate.cjs b/dist/cjs/nextjs/createServerValidate.cjs
index 5c49582dec7ad1d023b12f5e96a41d36f3f22611..02471efa0722e6aa8aa31c5f4384f31a592c1c38 100644
--- a/dist/cjs/nextjs/createServerValidate.cjs
+++ b/dist/cjs/nextjs/createServerValidate.cjs
@@ -1,17 +1,17 @@
-"use strict";
+
 Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
 const decodeFormdata = require("decode-formdata");
 const error = require("./error.cjs");
 const createServerValidate = (defaultOpts) => async (formData, info) => {
   const { validatorAdapter, onServerValidate } = defaultOpts;
-  const runValidator = (propsValue) => {
+  const runValidator = async (propsValue) => {
     if (validatorAdapter && typeof onServerValidate !== "function") {
-      return validatorAdapter().validate(propsValue, onServerValidate);
+      return await validatorAdapter().validateAsync(propsValue, onServerValidate);
     }
     return onServerValidate(propsValue);
   };
   const values = decodeFormdata.decode(formData, info);
-  const onServerError = runValidator({ value: values });
+  const onServerError = await runValidator({ value: values });
   if (!onServerError) return;
   const formState = {
     errorMap: {
diff --git a/dist/cjs/start/createServerValidate.cjs b/dist/cjs/start/createServerValidate.cjs
index d9afd61b67675775bdfd909d9afe75ec5a2c8d8b..6481e103235236ad7fc530ff097480b66c0c694f 100644
--- a/dist/cjs/start/createServerValidate.cjs
+++ b/dist/cjs/start/createServerValidate.cjs
@@ -1,19 +1,19 @@
-"use strict";
+
 Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
 const decodeFormdata = require("decode-formdata");
 const utils = require("./utils.cjs");
 const error = require("./error.cjs");
 const createServerValidate = (defaultOpts) => async (ctx, formData, info) => {
   const { validatorAdapter, onServerValidate } = defaultOpts;
-  const runValidator = (propsValue) => {
+  const runValidator = async (propsValue) => {
     if (validatorAdapter && typeof onServerValidate !== "function") {
-      return validatorAdapter().validate(propsValue, onServerValidate);
+      return await validatorAdapter().validateAsync(propsValue, onServerValidate);
     }
     return onServerValidate(propsValue);
   };
   const referer = ctx.request.headers.get("referer");
   const data = decodeFormdata.decode(formData, info);
-  const onServerError = runValidator({ value: data });
+  const onServerError = await runValidator({ value: data });
   if (!onServerError) return;
   const formState = {
     errorMap: {
diff --git a/dist/esm/nextjs/createServerValidate.js b/dist/esm/nextjs/createServerValidate.js
index ecd3fb3bfea260d8c1c2f6cdbcbf55a875e6995f..22d5249805d2861a4db7bfc5441b16ae67ba6a87 100644
--- a/dist/esm/nextjs/createServerValidate.js
+++ b/dist/esm/nextjs/createServerValidate.js
@@ -2,14 +2,14 @@ import { decode } from "decode-formdata";
 import { ServerValidateError } from "./error.js";
 const createServerValidate = (defaultOpts) => async (formData, info) => {
   const { validatorAdapter, onServerValidate } = defaultOpts;
-  const runValidator = (propsValue) => {
+  const runValidator = async (propsValue) => {
     if (validatorAdapter && typeof onServerValidate !== "function") {
-      return validatorAdapter().validate(propsValue, onServerValidate);
+      return await validatorAdapter().validateAsync(propsValue, onServerValidate);
     }
     return onServerValidate(propsValue);
   };
   const values = decode(formData, info);
-  const onServerError = runValidator({ value: values });
+  const onServerError = await runValidator({ value: values });
   if (!onServerError) return;
   const formState = {
     errorMap: {
diff --git a/dist/esm/start/createServerValidate.js b/dist/esm/start/createServerValidate.js
index 699d2356472defa613d914f53e35f49b4f2bed96..259755fa5a577aec3b386ec6d0b36c3b4705425f 100644
--- a/dist/esm/start/createServerValidate.js
+++ b/dist/esm/start/createServerValidate.js
@@ -1,17 +1,17 @@
 import { decode } from "decode-formdata";
-import { _tanstackInternalsCookie } from "./utils.js";
 import { ServerValidateError } from "./error.js";
+import { _tanstackInternalsCookie } from "./utils.js";
 const createServerValidate = (defaultOpts) => async (ctx, formData, info) => {
   const { validatorAdapter, onServerValidate } = defaultOpts;
-  const runValidator = (propsValue) => {
+  const runValidator = async (propsValue) => {
     if (validatorAdapter && typeof onServerValidate !== "function") {
-      return validatorAdapter().validate(propsValue, onServerValidate);
+      return await validatorAdapter().validateAsync(propsValue, onServerValidate);
     }
     return onServerValidate(propsValue);
   };
   const referer = ctx.request.headers.get("referer");
   const data = decode(formData, info);
-  const onServerError = runValidator({ value: data });
+  const onServerError = await runValidator({ value: data });
   if (!onServerError) return;
   const formState = {
     errorMap: {
diff --git a/src/nextjs/createServerValidate.ts b/src/nextjs/createServerValidate.ts
index 13154c9754b9f2b02aeb739ed42d36425564beb4..38a366a899e70f7c15b713f830e50f09b41facf1 100644
--- a/src/nextjs/createServerValidate.ts
+++ b/src/nextjs/createServerValidate.ts
@@ -1,10 +1,10 @@
-import { decode } from 'decode-formdata'
-import { ServerValidateError } from './error'
 import type {
   FormOptions,
   ValidationError,
   Validator,
 } from '@tanstack/form-core'
+import { decode } from 'decode-formdata'
+import { ServerValidateError } from './error'
 import type { ServerFormState } from './types'
 
 type OnServerValidateFn<TFormData> = (props: {
@@ -30,9 +30,9 @@ export const createServerValidate =
   async (formData: FormData, info?: Parameters<typeof decode>[1]) => {
     const { validatorAdapter, onServerValidate } = defaultOpts
 
-    const runValidator = (propsValue: { value: TFormData }) => {
+    const runValidator = async (propsValue: { value: TFormData }) => {
       if (validatorAdapter && typeof onServerValidate !== 'function') {
-        return validatorAdapter().validate(propsValue, onServerValidate)
+        return await validatorAdapter().validateAsync(propsValue, onServerValidate)
       }
 
       return (onServerValidate as OnServerValidateFn<TFormData>)(propsValue)
@@ -40,7 +40,7 @@ export const createServerValidate =
 
     const values = decode(formData, info) as never as TFormData
 
-    const onServerError = runValidator({ value: values })
+    const onServerError = await runValidator({ value: values })
 
     if (!onServerError) return
 
diff --git a/src/start/createServerValidate.tsx b/src/start/createServerValidate.tsx
index 7d82edfe4379fb6b9e65a3e1783abb4eaa1ac0b7..64115cd80708482c7de48edb8a167b3cf0fc0fa7 100644
--- a/src/start/createServerValidate.tsx
+++ b/src/start/createServerValidate.tsx
@@ -1,13 +1,13 @@
-import { decode } from 'decode-formdata'
-import { _tanstackInternalsCookie } from './utils'
-import { ServerValidateError } from './error'
 import type {
   FormOptions,
   ValidationError,
   Validator,
 } from '@tanstack/form-core'
 import type { FetchFn } from '@tanstack/start'
+import { decode } from 'decode-formdata'
+import { ServerValidateError } from './error'
 import type { ServerFormState } from './types'
+import { _tanstackInternalsCookie } from './utils'
 
 type Ctx = Parameters<FetchFn<FormData, unknown>>[1]
 
@@ -34,9 +34,9 @@ export const createServerValidate =
   async (ctx: Ctx, formData: FormData, info?: Parameters<typeof decode>[1]) => {
     const { validatorAdapter, onServerValidate } = defaultOpts
 
-    const runValidator = (propsValue: { value: TFormData }) => {
+    const runValidator = async (propsValue: { value: TFormData }) => {
       if (validatorAdapter && typeof onServerValidate !== 'function') {
-        return validatorAdapter().validate(propsValue, onServerValidate)
+        return await validatorAdapter().validateAsync(propsValue, onServerValidate)
       }
 
       return (onServerValidate as OnServerValidateFn<TFormData>)(propsValue)
@@ -46,7 +46,7 @@ export const createServerValidate =
 
     const data = decode(formData, info) as never as TFormData
 
-    const onServerError = runValidator({ value: data })
+    const onServerError = await runValidator({ value: data })
 
     if (!onServerError) return
 
